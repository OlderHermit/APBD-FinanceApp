@page "/login"
@inject HttpClient Http
@inject NavigationManager nav
@inject IJSRuntime jsr

<section class="vh-100 gradient-custom">
    <div class="container py-5 h-100">
        <div class="row d-flex justify-content-center align-items-center h-100">
            <div class="col-12 col-md-8 col-lg-6 col-xl-5">
            <div class="card bg-dark text-white" style="border-radius: 1rem;">
                <div class="card-body p-5 text-center">
              
                <div class="mb-md-5 mt-md-4 pb-5">
                    <EditForm Model="user" OnValidSubmit="OnValid" style="max-width:500px;">
	                    <DataAnnotationsValidator />
	                    <ValidationSummary />
                        <h2 class="fw-bold mb-2 text-uppercase">Login</h2>
                        <p class="text-white-50 mb-5">@message</p>

                        <div class="form-outline form-white mb-4 text-start">
                        <input type="email" id="typeEmailX" class="form-control form-control-lg" @bind-value="user.email"/>
                        <label class="form-label" for="typeEmailX">Email</label>
                        </div>

                        <div class="form-outline form-white mb-4 text-start">
                        <input type="password" id="typePasswordX" class="form-control form-control-lg"  @bind-value="user.password"/>
                        <label class="form-label" for="typePasswordX">Password</label>
                        </div>

                        <button class="btn btn-outline-light btn-lg px-5" type="submit" disabled="@isDisabled">Login</button>
                    </EditForm>
                </div>
                <div>
                    <p class="text-center text-muted mt-5 mb-0">Don't have an account? <a  href="/register" class="text-white-50 fw-bold ">Sign Up</a></p>
                </div>
                </div>
            </div>
            </div>
        </div>
    </div>
</section>

@code {
	LoginModel user = new LoginModel();
	string message = "Please enter your login and password!";
	bool isDisabled = false;

	private async Task OnValid()
	{
		isDisabled = true;
		using (var msg = await Http.PostAsJsonAsync<LoginModel>("/api/auth/login", user, System.Threading.CancellationToken.None))
		{
			if (msg.IsSuccessStatusCode)
			{
				LoginResult result = await msg.Content.ReadFromJsonAsync<LoginResult>();
				message = result.message;
				isDisabled = false;
				if (result.success) {
					await jsr.InvokeVoidAsync("localStorage.setItem", "user", $"{result.jwtBearer}").ConfigureAwait(false);
					nav.NavigateTo("/");
				}
			}
		}
	}
}
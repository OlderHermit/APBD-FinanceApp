@page "/ticketers/{Code:int}"
@inject HttpClient Http
@inject NavigationManager nav
@inject IJSRuntime js


@if (string.IsNullOrEmpty(userdata))
{
	<p><a href="/login">LOGIN TO ACCESS THIS DATA</a></p>
}
else
{
	if (TicketerDatas == null || Ticketers == null || Articles == null)
	{
		<p><em>Loading...</em></p>
	}
	else if (TicketerDatas.Count == 0 || Ticketers.Count == 0)
	{
		<p><em>Could not load...</em></p>
	}
	else
	{
		<div class="container py-5 h-100">
        <div class="row d-flex justify-content-center align-items-center h-100">
		<SfDashboardLayout CellSpacing="@(new double[]{20 ,20 })" CellAspectRatio="2" Columns="6">
			<DashboardLayoutPanels>
				<DashboardLayoutPanel SizeX=4 SizeY=7 Col="1" AllowDragging=false>
					<ContentTemplate>
						<div class="container h-10">
							<div class="card bg-dark p-5 text-white" style="border-radius: 1rem; border: none;">	
								@foreach (var item in Articles)
								{	
									<h3 style="text-align: left"><a href="@item.article_url">@item.publisher.name</a></h3><br />
									<p style="text-align: left; font-size: 14px">@item.title</p> <p style="text-align: right">@item.published_utc</p>								
								}
							</div>	
						</div>
					</ContentTemplate>
				</DashboardLayoutPanel>
				<DashboardLayoutPanel SizeX=4 SizeY="5" Col="1" AllowDragging=false>
					<ContentTemplate>
						<div class="container h-10">
							<div  style="padding-top: 10px; padding-bottom:10px">
								<!---<button class="btn btn-outline-light btn-sm px-5" type="submit">Login1</button>
								<button class="btn btn-outline-light btn-sm px-5" type="submit">Login2</button>
								<button class="btn btn-outline-light btn-sm px-5" type="submit">Login3</button>
								<button class="btn btn-outline-light btn-sm px-5" type="submit">Login4</button>-->
							</div>
							<div class="row d-flex justify-content-center align-items-center h-10" style="min-width: 70%">
								<div class="card bg-dark text-white" style="border-radius: 1rem; border: none;">
									<div class="card-body text-center">
										<SfStockChart Title="@stringCode">
											<StockChartSeriesCollection>
												<StockChartSeries DataSource="@TicketerDatas" Type="ChartSeriesType.HiloOpenClose" XName="Date" YName="Close" High="High" Low="Low" Open="Open" Close="Close" Volume="Volume"></StockChartSeries>
											</StockChartSeriesCollection>
										</SfStockChart>
									</div>
								</div>
							</div>
						</div>
					</ContentTemplate>
				</DashboardLayoutPanel>
				<DashboardLayoutPanel SizeX=4 SizeY=2 Col="1" AllowDragging=false>
					<ContentTemplate>
						<div style="display: flex; justify-content: space-between; align-items: center;">
							<img src="@Ticketer.Logo" alt="@(Ticketer.Symbol) Logo">
							<h1 style="margin-bottom: 0; margin-right: 23%;"> @Ticketer.Name (@Ticketer.Symbol)</h1> <br>
						</div>
						<div style="display: flex; justify-content: space-between; align-items: center;">
							<table style="text-align: left; margin-left: 25%;">
							<tr>
								<td style="padding-right: 20px"><p style="font-size: 1rem;">Country: @Ticketer.Country</p></td>
								<td style="padding-right: 20px"><p style="font-size: 1rem;">Industry: @Ticketer.Sector</p></td>
								<td style="padding-right: 30px"><p style="font-size: 1rem;">CEO: @Ticketer.CEO</p></td>
								<td style="padding-right: 20px;"><button type="button" class="btn btn-light btn-circle btn-sm" style="margin-bottom: 11px;" @onclick=@(AddToWatchList)>Add to Watchlist</button></td>
							</tr>
						</table>
						</div>
						
					</ContentTemplate>
				</DashboardLayoutPanel>
				<DashboardLayoutPanel SizeX=4 SizeY=2 Col="1" AllowDragging=false Enabled=false>
					<ContentTemplate>
						<section class="vh-10 gradient-custom">
							<div class="container h-10">
								<div class="row d-flex justify-content-center align-items-center h-10" style="min-width: 70%">
									<div class="col-12 col-md-8 col-lg-6 col-xl-5" style="min-width: 70%">
									<div class="card bg-dark text-white" style="border-radius: 1rem; border: none;">
										<div class="card-body p-5 text-center">
										<h2 class="fw-bold mb-5 text-uppercase">DashBoard</h2>
										<SfAutoComplete TValue="string" TItem="Ticketer" Placeholder="Select a company" DataSource="@Ticketers" ShowPopupButton="true" style="background-color: #212529; color: white">
											<AutoCompleteTemplates TItem="Ticketer">
												<NoRecordsTemplate>
													<span class='norecord'> NO COMPANY FOUND</span>
												</NoRecordsTemplate>
												<ItemTemplate>
													<span>
														<span class='code'>@(context.Symbol)</span>
														<span class='name' style="left: 30%; position: absolute">@(context.Name)</span>
													</span>
												</ItemTemplate>
											</AutoCompleteTemplates>
											<AutoCompleteEvents TItem="Ticketer" TValue="string" OnValueSelect="@PickedHandler"></AutoCompleteEvents>
											<AutoCompleteFieldSettings Value="Symbol"></AutoCompleteFieldSettings>
										</SfAutoComplete>
										</div>
									</div>
									</div>
								</div>
							</div>
						</section>
					</ContentTemplate>
				</DashboardLayoutPanel>
			</DashboardLayoutPanels>
		</SfDashboardLayout>
		</div>
		</div>

		<style>
			.e-panel-content {
				text-align: center;
				margin-top: 10px;
			}
			.e-dashboardlayout.e-control .e-panel .e-panel-container .e-panel-content {
				background-color: #212529;
				color: white;
				opacity: 1;
			}
			.e-dashboardlayout.e-control .e-panel .e-panel-container .e-panel-header {
				background-color: #212529;
				color: white;
				text-align: center;
				opacity: 1;
			}
			.e-dashboardlayout.e-control .e-panel {
				background: #212529;
				box-shadow: 0 2px 4px rgba(0,0,0,.075);
				box-sizing: border-box;
				position: absolute;
				opacity: 1;
			}
		</style>
	}
}

@code {
	[Parameter]
	public int Code { get; set; }
	string stringCode { get; set; }
	private List<TicketerData> TicketerDatas { get; set; }
	private List<Ticketer> Ticketers { get; set; }
	private Ticketer Ticketer { get; set; }
	private List<Article> Articles { get; set; }
	string userdata;


	private async Task<string> GetJWT()
	{
		userdata = await js.InvokeAsync<string>("localStorage.getItem", "user").ConfigureAwait(false);
		if (!string.IsNullOrWhiteSpace(userdata))
		{
			var dataArray = userdata.Split(';', 2);
			if (dataArray.Length == 2)
				return dataArray[1];
		}
		return null;
	}
	protected override async Task OnParametersSetAsync()
	{
		try
		{
			await base.OnParametersSetAsync();
			stringCode = GoAroundSendingStringCode.List.Where(e => e.Key == Code).FirstOrDefault().Value;

			var requestMsgOne = new HttpRequestMessage(HttpMethod.Get, "/api/ticketer/" + stringCode);
			var requestMsgTwo = new HttpRequestMessage(HttpMethod.Get, "/api/ticketer");
			var requestMsgThree = new HttpRequestMessage(HttpMethod.Get, "/api/ticketer/news/" + stringCode);
			requestMsgOne.Headers.Add("Authorization", "Bearer " + await GetJWT());
			requestMsgTwo.Headers.Add("Authorization", "Bearer " + await GetJWT());
			requestMsgThree.Headers.Add("Authorization", "Bearer " + await GetJWT());

			var responseThree = await Http.SendAsync(requestMsgThree);
			var responseOne = await Http.SendAsync(requestMsgOne);
			var responseTwo = await Http.SendAsync(requestMsgTwo);

			//Data for specified Ticketer
			if (responseOne.StatusCode == System.Net.HttpStatusCode.Unauthorized)
			{
				await js.InvokeVoidAsync("localStorage.removeItem", "user").ConfigureAwait(false);
				userdata = null;
			}
			else if (responseOne.StatusCode == System.Net.HttpStatusCode.NoContent)
				TicketerDatas = new List<TicketerData>();
			else if (responseOne.StatusCode == System.Net.HttpStatusCode.NonAuthoritativeInformation)
				TicketerDatas = (await responseOne.Content.ReadFromJsonAsync<List<TicketerData>>());
			else if (responseOne.StatusCode == System.Net.HttpStatusCode.OK)
			{
				TicketerDatas = (await responseOne.Content.ReadFromJsonAsync<GetFromPolygonIO>())
				.results.Select(e => new TicketerData
					{
						Close = e.c,
						High = e.h,
						Low = e.l,
						Open = e.o,
						Date = DateTimeOffset.FromUnixTimeMilliseconds(e.t).DateTime,
						Volume = e.v,
					}).ToList();
			}

			//Ticketers for Dashboard
			if (responseTwo.StatusCode == System.Net.HttpStatusCode.Unauthorized)
			{
				await js.InvokeVoidAsync("localStorage.removeItem", "user").ConfigureAwait(false);
				userdata = null;
			}
			else if (responseTwo.StatusCode == System.Net.HttpStatusCode.NoContent)
				Ticketers = new List<Ticketer>();
			else if (responseTwo.IsSuccessStatusCode)
				Ticketers = await responseTwo.Content.ReadFromJsonAsync<List<Ticketer>>();
			
			//Articles
			if (responseThree.StatusCode == System.Net.HttpStatusCode.Unauthorized)
			{
				await js.InvokeVoidAsync("localStorage.removeItem", "user").ConfigureAwait(false);
				userdata = null;
			}
			else if (responseThree.StatusCode == System.Net.HttpStatusCode.NoContent)
			{
				Articles = new List<Article>();
			}
			else if (responseThree.StatusCode == System.Net.HttpStatusCode.NonAuthoritativeInformation)
				Articles = (await responseThree.Content.ReadFromJsonAsync<List<Article>>());
			else if (responseThree.StatusCode == System.Net.HttpStatusCode.OK)
			{
				Articles = (await responseThree.Content.ReadFromJsonAsync<GetFromPolygonIONews>())
				.results.Select(e => new Article
					{
						publisher = e.publisher,
						article_url = e.article_url,
						title = e.title,
						published_utc = e.published_utc
					}).ToList();
			}
			Ticketer = Ticketers.Where(e => e.Symbol == stringCode).FirstOrDefault();
		}
		catch (Exception ex){}
	}

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		try
		{
			var request = new HttpRequestMessage(HttpMethod.Get, "/api/auth/chceck");
			request.Headers.Add("Authorization", "Bearer " + await GetJWT());
			var response = await Http.SendAsync(request);
			if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
			{
				await js.InvokeVoidAsync("localStorage.removeItem", "user").ConfigureAwait(false);
				userdata = null;
			}
		}
		catch (Exception ex){}
	}

	private void PickedHandler(SelectEventArgs<Ticketer> args)
	{
		nav.NavigateTo("/ticketers/" + GoAroundSendingStringCode.List.Where(e => e.Value == args.ItemData.Symbol).FirstOrDefault().Key, forceLoad: true);
	}

	private void GoToNewsPage(Article article)
	{
		nav.NavigateTo(article.article_url);
	}

	private async void AddToWatchList()
	{
		//perhaps block button if already in watch list
		try
		{
			var requestMsg = new HttpRequestMessage(HttpMethod.Post, "/api/ticketer/watchlist/" + (await js.InvokeAsync<string>("localStorage.getItem", "user").ConfigureAwait(false)).Split(";", 2)[0] + "/" + Code);
			requestMsg.Headers.Add("Authorization", "Bearer " + await GetJWT());
			var response = await Http.SendAsync(requestMsg);
			if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
			{
				await js.InvokeVoidAsync("localStorage.removeItem", "user").ConfigureAwait(false);
				userdata = null;
			}
			else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
				await js.InvokeVoidAsync("alert", await response.Content.ReadAsStringAsync());
			else if (response.IsSuccessStatusCode)
				nav.NavigateTo("/watchlist");
		}
		catch (Exception ex){}
	}
}

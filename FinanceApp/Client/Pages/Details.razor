@page "/ticketers/{Code:int}"
@inject HttpClient Http
@inject NavigationManager nav
@inject IJSRuntime js

@if (string.IsNullOrEmpty(userdata))
{
	<p><a href="/login">LOGIN TO ACCESS THIS DATA</a></p>
}
else
{
	if (ticketerData == null)
	{
		<p><em>Loading...</em></p>
	}
	else
	{
		<h2>WorkinProgress</h2>
	}
}

@code {
	[Parameter]
	public int Code { get; set; }
	private TicketerData ticketerData { get; set; }
	string userdata;

	private async Task<string> GetJWT()
	{
		userdata = await js.InvokeAsync<string>("localStorage.getItem", "user").ConfigureAwait(false);
		if (!string.IsNullOrWhiteSpace(userdata))
		{
			var dataArray = userdata.Split(';', 2);
			if (dataArray.Length == 2)
				return dataArray[1];
		}
		return null;
	}

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		try
		{
			var stringCode = GoAroundSendingStringCode.List.Where(e => e.Key == Code).FirstOrDefault().Value;
			var requestMsg = new HttpRequestMessage(HttpMethod.Get, "/api/ticketer/" + stringCode);
			requestMsg.Headers.Add("Authorization", "Bearer " + await GetJWT());
			var response = await Http.SendAsync(requestMsg);
			if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
			{
				await js.InvokeVoidAsync("localStorage.removeItem", "user").ConfigureAwait(false);
				userdata = null;
			}
			else if (response.StatusCode == System.Net.HttpStatusCode.NoContent)
				ticketerData = null;
			//else if (response.IsSuccessStatusCode)
			//ticketerData = await response.Content.ReadFromJsonAsync<TicketerData>();
		}
		catch (Exception ex){}
	}
}

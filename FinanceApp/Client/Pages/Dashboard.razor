@page "/dashboard"
@inject HttpClient Http
@inject NavigationManager nav
@inject IJSRuntime js

@if (string.IsNullOrEmpty(userdata))
{
	<p><a href="/login">LOGIN TO ACCESS THIS DATA</a></p>
}
else
{
	if (Ticketers == null)
	{
		<p><em>Loading...</em></p>
	}
	else
	{
		<section class="vh-50 gradient-custom">
			<div class="container py-5 h-100">
				<div class="row d-flex justify-content-center align-items-center h-100" style="min-width: 70%">
					<div class="col-12 col-md-8 col-lg-6 col-xl-5" style="min-width: 70%">
					<div class="card bg-dark text-white" style="border-radius: 1rem;">
						<div class="card-body p-5 text-center">
						<h2 class="fw-bold mb-5 text-uppercase">DashBoard</h2>
						<SfAutoComplete TValue="string" TItem="Ticketer" Placeholder="Select a company" DataSource="@Ticketers" ShowPopupButton="true" style="background-color: #212529; color: white">
							<AutoCompleteTemplates TItem="Ticketer">
								<NoRecordsTemplate>
									<span class='norecord'> NO COMPANY FOUND</span>
								</NoRecordsTemplate>
								<ItemTemplate>
									<span>
										<span class='code'>@(context.Symbol)</span>
										<span class='name' style="left: 30%; position: absolute">@(context.Name)</span>
									</span>
								</ItemTemplate>
							</AutoCompleteTemplates>
							<AutoCompleteEvents TItem="Ticketer" TValue="string" OnValueSelect="@PickedHandler"></AutoCompleteEvents>
							<AutoCompleteFieldSettings Value="Symbol"></AutoCompleteFieldSettings>
						</SfAutoComplete>
						</div>
					</div>
					</div>
				</div>
			</div>
		</section>
	}
}




<style>
    .e-dropdownbase .e-list-item, .e-dropdownbase .e-list-item.e-item-focus {
    background-color: #212529;
    font-size: 27px;
    color: white;
    border-block: 5px;
    border-style: solid;
    border-block-color: #212529;
}
</style>

@code {
    private List<Ticketer> Ticketers { get; set; }
	string userdata;

	private async Task<string> GetJWT()
	{
		userdata = await js.InvokeAsync<string>("localStorage.getItem", "user").ConfigureAwait(false);
		if (!string.IsNullOrWhiteSpace(userdata))
		{
			var dataArray = userdata.Split(';', 2);
			if (dataArray.Length == 2)
				return dataArray[1];
		}
		return null;
	}

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		try
		{
			var request = new HttpRequestMessage(HttpMethod.Get, "/api/auth/chceck");
			request.Headers.Add("Authorization", "Bearer " + await GetJWT());
			var response = await Http.SendAsync(request);
			if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
			{
				await js.InvokeVoidAsync("localStorage.removeItem", "user").ConfigureAwait(false);
				userdata = null;
			}
		}
		catch (Exception ex){}
	}

	protected override async Task OnParametersSetAsync()
	{
		await base.OnParametersSetAsync();
		try
		{
			var requestMsg = new HttpRequestMessage(HttpMethod.Get, "/api/ticketer");
			requestMsg.Headers.Add("Authorization", "Bearer " + await GetJWT());
			var response = await Http.SendAsync(requestMsg);
			if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
			{
				await js.InvokeVoidAsync("localStorage.removeItem", "user").ConfigureAwait(false);
				userdata = null;
			}
			else if (response.StatusCode == System.Net.HttpStatusCode.NoContent)
				Ticketers = null;
			else if (response.IsSuccessStatusCode)
				Ticketers = await response.Content.ReadFromJsonAsync<List<Ticketer>>();
		}
		catch (Exception ex){}
	}

    private void PickedHandler(SelectEventArgs<Ticketer> args)
    {
        nav.NavigateTo("/ticketers/" + GoAroundSendingStringCode.List.Where(e => e.Value == args.ItemData.Symbol).FirstOrDefault().Key);
    }
}
